var Modals = React.createClass({
  mixins: [React.addons.LinkedStateMixin],
// Setup functions
  getInitialState: function() {
    return {
      modal:   null,
      editId: null,
      newNotebookTitle: "",
      newNotebookDescription: "",
      encryptPass: '',
      encryptPassConfirm: '',
      encryptPassStrength: {},
      pending: false,
      hideEncryptWarning: false,
    };
  },
  componentWillMount: function() {
    ModalStore.addChangeListener(this.raiseModal);
  },
  componentWillUnmount: function() {
    ModalStore.removeChangeListener(this.raiseModal);
  },
  raiseModal: function () {
    var modalInfo = ModalStore.currentModal();
    switch (modalInfo.type) {
    case "deleteNote":
      this.setState({modal: this.deleteNoteModal(modalInfo.object.id), editId: modalInfo.object.id});
      break;
    case "deleteNotebook":
      this.setState({modal: this.deleteNotebookModal(), editId: modalInfo.object.id});
      break;
    case "newNotebook":
      this.setState({modal: this.newNotebookModal(), editId: null});
      break;
    case "confirmDropChanges":
      this.setState({modal: this.confirmDropChangesModal(modalInfo.callback)});
      break;
    case "encryptWarning":
      this.setState({modal: this.encryptWarningModal(modalInfo.callback)});
      break;
    case "encryptNote":
      this.setState({modal: this.encryptNoteModal(modalInfo.callback)});
      break;
    case "decryptNote":
      this.setState({modal: this.decryptNoteModal(modalInfo.callback)});
      break;
    case "noteSharing":
      this.setState({modal: this.noteSharingModal()});
      break;
    case "saveFirst":
      this.setState({modal: this.saveFirstModal()});
      break;
    case "about":
      this.setState({modal: this.aboutModal()});
      break;
    default:
      this.setState({modal: null, editId: null});
    }
  },
// Modal functions
  spinner: function () {
    return (
      <div className="modal spinner">
        <i className="modal-spinner-image fa fa-spinner fa-spin " />
      </div>
    );
  },
  closeModal: function () {
    ModalActions.closeModal();
  },
  deleteNoteModal: function (id) {
    var note = NoteStore.getByID(id);
    var message;
    if (CurrentUserStore.currentUser().id === note.owner.id) {
      message = "Delete this note?";
    } else {
      message = "Remove this from your notes?";
    }
    return (
      <div className="modal confirm-delete">
        <div>
          <p>{ message }</p>
          <button onClick={this.deleteNote}>Yes</button>
          <button onClick={this.closeModal}>No</button>
        </div>
      </div>
    );
  },
  deleteNote: function (e) {
    e.preventDefault();
    var note = NoteStore.getByID(this.state.editId);
    if (CurrentUserStore.currentUser().id === note.owner.id) {
      NotesAPIUtil.destroyNote({id: this.state.editId}, this.closeModal);
    } else {
      SharesAPIUtil.deleteShare(ShareStore.getByNoteID(this.state.editId)[0].id, this.closeModal);
    }
  },
  deleteNotebookModal: function () {
    return (
      <div className="modal confirm-delete">
        <div>
          <p>Delete this notebook?</p>
          <button onClick={this.deleteNotebook}>Yes</button>
          <button onClick={this.closeModal}>No</button>
        </div>
      </div>
    );
  },
  deleteNotebook: function (e) {
    e.preventDefault();
    NotebooksAPIUtil.destroyNotebook({id: this.state.editId}, this.closeModal);
  },
  newNotebookModal: function () {
    return(
      <div className="modal new-notebook-form">
        <div>
          <form onSubmit={this.newNotebook}>
            <label htmlFor="notebookTitle">Notebook title:</label>
            <input type="text" name="notebookTitle" onChange={this.titleChanged} />
            <label htmlFor="notebookDescription">Notebook description:</label>
            <input type="text" name="notebookDescription"  onChange={this.descriptionChanged}/>
            <button>Create notebook</button>
            <button onClick={this.closeModal}>Cancel</button>
          </form>
        </div>
      </div>
    );
  },
  newNotebook: function (e) {
    e.preventDefault();
    this.setState({pending: true, modal: this.spinner() });
    var notebook = {
      title: this.state.newNotebookTitle,
      description: this.state.newNotebookDescription
    };
    NotebooksAPIUtil.createNotebook(notebook, this.closeModal, function () {
      this.setState({modal: this.newNotebookModal(), editId: null });
    });
  },

  noteSharingModal: function () {
    return(
      <div className="modal sharing-modal">
        <NoteSharing note={SelectedStore.getNote()} />
        <button onClick={this.closeModal}>Close</button>
      </div>
    );
  },

  encryptWarningModal: function (callback) {
    var accept = function () {
      if (this.state.hideEncryptWarning) {
        UsersApiUtil.updateUser({hide_encrypt_warning: true});
      }
      this.setState({modal: this.encryptNoteModal(callback)});
    }.bind(this);


    return (
      <div className="modal confirm-encrypt">
        <div className="warning-text">
          <p>By clicking below you acknowledge your understanding that Pagevault does not retain
          encryption passwords.</p>

        <p><strong>If you lose or forget the password there will be no way to recover it.</strong></p>
          <div className="fancyCheck">
            <input id="hide-warning" type="checkbox" value="None" onChange={this.hideEncryptWarningChange}></input>
            <label htmlFor="hide-warning"></label>
          </div>
          Don't show this warning again.
          <br />
          <button className="close-warning" onClick={accept}>I understand</button>
        </div>
      </div>
    );
  },
  encryptNoteModal: function (callback) {
    var setPass = function (password) {
      callback(this.state.encryptPass);
    }.bind(this);
    return (
      <div className="modal confirm-encrypt">
        <div>
          <p>Encrypt this note.</p>
          <PasswordStrengthMeter onChange={this.encryptPassChanged}/>
          <button onClick={setPass}>Encrypt</button>
          <button onClick={this.closeModal}>Cancel</button>
        </div>
      </div>
    );
  },
  decryptNoteModal: function (callback) {
    return (
      <div className="modal confirm-decrypt">
        <div>
          <p>Remove encryption from this note?</p>
          <button onClick={callback}>Remove</button>
          <button onClick={this.closeModal}>Cancel</button>
        </div>
      </div>
    );
  },
  confirmDropChangesModal: function (callback) {
    return (
      <div className="modal confirm-delete">
        <div>
          <p>Discard changes to this encrypted note?</p>
          <button onClick={callback}>Yes</button>
          <button onClick={this.closeModal}>No</button>
        </div>
      </div>
    );
  },
  aboutModal: function () {

    return (
      <div className="modal about-modal">
        <div className="about-text">
          <img src="<%= image_url('logo-big.svg') %>" />
          <p>Pagevault is an online note taking app with rich text and embedded image capability.
          It also includes the ability to encrypt notes before they are transfered to the server.
          The password used for the encryption is never stored or transfered over the internet.
          <strong> If you lose the password it CANNOT be recovered by Pagevault.</strong> Any encrypted
          notes for which you do not have the password are lost forever. </p>

          <p>It is also important to note that only the body text of a note is encrypted. The title,
          tags, and notebook data are sent in plaintext. If this were not the case then searching
          would be impossible, and notes could only be recognized by an ID number. Any data that
          is meant to be encrypted should be entered into the note body only. Additionally, any images
          embedded in encrypted notes are not themselved encrypted.</p>

        <button onClick={this.closeModal}>Close</button>
        </div>
      </div>
    );
  },
  saveFirstModal: function () {

    return (
      <div className="modal save-first-modal">
        <div className="about-text">


          <p>You must give your note a title before enabling
          sharing or encryption.</p>

        <button onClick={this.closeModal}>Close</button>
        </div>
      </div>
    );
  },
// State update functions
  passwordErrors: function (password, confirm) {
    var errors = [];
    if (this.state.encryptPassStrength < 3) {
      errors.push("Too weak.");
    }
    if (password !== confirm) {
      errors.push("Confirmation doesn't match.");
    }
    return (
      <ul>
        {errors.map(function (error) {
          return (
            <li>{error}</li>
          );
        })}
      </ul>
    );
  },
  encryptPassConfirmChanged: function (e) {
    this.setState({encryptPassConfirmed: e.currentTarget.value});
  },
  hideEncryptWarningChange: function (e) {
    this.setState({hideEncryptWarning: e.currentTarget.checked});
  },
  encryptPassChanged: function (e) {
    this.setState({encryptPass: e.currentTarget.value});
  },
  titleChanged: function (e) {
    this.setState({newNotebookTitle: e.currentTarget.value});
  },
  descriptionChanged: function (e) {
    this.setState({newNotebookDescription: e.currentTarget.value});
  },



  render: function() {
    var modalClass;
    if (this.state.modal) {
      modalClass = "modal-bg";
    }
    return (
      <div className={modalClass}>
        {this.state.modal}
      </div>

    );
  }
});
